#!/bin/bash
#SBATCH --job-name=DNA_PRE_PROCESSING
#SBATCH --time=20:00:00
#SBATCH --ntasks=1
#SBATCH --mem=240G
#SBATCH --cpus-per-task=40
#SBATCH --chdir=/mnt/nfs/lobo/IMM-NFS/cfranco/scratch

# ============ SETUP ============ #
path="/mnt/nfs/lobo/IMM-NFS/cfranco/MCPP-Lung/DNA"
fastq_dir="$path/DNA_fastq"
fastqc_dir="$path/DNA_FASTQC"
multiqc_dir="$path/DNA_MULTIQC"
fastp_dir="$path/DNA_fastp"
bwa_dir="$path/BWA"
samtobam_dir="$path/samToBam"
fastqtosam_dir="$path/FastqToSam"
merged_bam_dir="$path/MergeBamAlignment"
markdup_dir="$path/MarkDuplicates"
sortedbam_dir="$path/sortedbam"
bqsr_dir="$path/BaseRecalibrator_snps_indels"
applybqsr_dir="$path/ApplyBQSR"
tmp_dir="$path/TMP"
untrimmed_dir="$path/untrimmed_fastq"

genome="/mnt/nfs/lobo/SALMEIDA-NFS/lcosta/MCPP-Lung/bwa_prefiles/GRCh38.primary_assembly.genome.fa"
known_sites="/mnt/nfs/lobo/SALMEIDA-NFS/lcosta/MCPP-Lung/gatk_files/Homo_sapiens_assembly38.dbsnp138.vcf"
known_sites_indels="/mnt/nfs/lobo/SALMEIDA-NFS/lcosta/MCPP-Lung/gatk_files/Homo_sapiens_assembly38.known_indels.vcf.gz"

# ============ STEP 1: FASTQC ============ #
echo "START FASTQC"
mkdir -p "$fastqc_dir"
for R1 in "$fastq_dir"/*_R1_001.fastq.gz; do
    R2="${R1/_R1_001.fastq.gz/_R2_001.fastq.gz}"
    sample_name=$(basename "$R1" _R1_001.fastq.gz)
    echo "Running FastQC for $sample_name"
    srun /mnt/beegfs/apptainer/images/biocontainers-fastqc-v0.11.9_cv8.img fastqc "$R1" "$R2" -o "$fastqc_dir"
done

# ============ STEP 2: MULTIQC ============ #
echo "START MULTIQC"
mkdir -p "$multiqc_dir"
srun /mnt/beegfs/apptainer/images/multiqc-1.20.sif multiqc "$fastqc_dir" -o "$multiqc_dir"

# ============ STEP 3: FASTP ============ #
echo "START FASTP"
mkdir -p "$fastp_dir" "$untrimmed_dir"
for R1 in "$fastq_dir"/*_R1_001.fastq.gz; do
    R2="${R1/_R1_001.fastq.gz/_R2_001.fastq.gz}"
    sample=$(basename "$R1" _R1_001.fastq.gz)
    trimmed_R1="$fastp_dir/${sample}_R1.trimmed.fastq.gz"
    trimmed_R2="$fastp_dir/${sample}_R2.trimmed.fastq.gz"
    echo "Trimming $sample"
    srun /mnt/beegfs/apptainer/images/fastp_0.19.5.sif fastp --thread 40 -i "$R1" -I "$R2" -o "$trimmed_R1" -O "$trimmed_R2"
    mv "$R1" "$R2" "$untrimmed_dir/"
done

# ============ STEP 4: BWA ALIGNMENT ============ #
echo "START BWA"
mkdir -p "$bwa_dir"
for trimmed_R1 in "$fastp_dir"/*_R1.trimmed.fastq.gz; do
    trimmed_R2="${trimmed_R1/_R1.trimmed/_R2.trimmed}"
    sample=$(basename "$trimmed_R1" _R1.trimmed.fastq.gz)
    sam_out="$bwa_dir/${sample}.sam"
    srun /mnt/beegfs/apptainer/images/bwa_latest.sif bwa mem -t 40 "$genome" "$trimmed_R1" "$trimmed_R2" > "$sam_out"
done

# ============ STEP 5: SAMTOOLS CONVERT TO BAM ============ #
echo "START SAMTOOLS"
mkdir -p "$samtobam_dir"
for sam_file in "$bwa_dir"/*.sam; do
    sample=$(basename "$sam_file" .sam)
    bam_out="$samtobam_dir/${sample}.unsorted.bam"
    srun /mnt/beegfs/apptainer/images/samtools_latest.sif samtools view -S -b "$sam_file" > "$bam_out"
done

# ============ STEP 6: FASTQ to uBAM ============ #
echo "START FASTQtoSAM"
mkdir -p "$fastqtosam_dir"
for trimmed_R1 in "$fastp_dir"/*_R1.trimmed.fastq.gz; do
    trimmed_R2="${trimmed_R1/_R1.trimmed/_R2.trimmed}"
    sample=$(basename "$trimmed_R1" _R1.trimmed.fastq.gz)
    ubam_out="$fastqtosam_dir/${sample}.unmapped.bam"
    srun /mnt/beegfs/apptainer/images/picard_latest.sif java -XX:ParallelGCThreads=40 -jar /usr/picard/picard.jar FastqToSam F1="$trimmed_R1" F2="$trimmed_R2" O="$ubam_out" SM="$sample" TMP_DIR="$tmp_dir"
done

# ============ STEP 7: MergeBamAlignment ============ #
echo "START MergeBamAlignment"
mkdir -p "$merged_bam_dir"
for ubam in "$fastqtosam_dir"/*.unmapped.bam; do
    sample=$(basename "$ubam" .unmapped.bam)
    aligned_bam="$sam2bam_dir/${sample}.unsorted.bam"
    merged_bam="$merged_bam_dir/${sample}.merged.bam"
    srun /mnt/beegfs/apptainer/images/picard_latest.sif java -XX:ParallelGCThreads=40 -jar /usr/picard/picard.jar MergeBamAlignment ALIGNED="$aligned_bam" UNMAPPED="$ubam" O="$merged_bam" R="$genome" SORT_ORDER=coordinate TMP_DIR="$tmp_dir"
done

# ============ STEP 8: MarkDuplicates ============ #
echo "START MarkDuplicates"
mkdir -p "$markdup_dir"
for merged_bam in "$merged_bam_dir"/*.merged.bam; do
    sample=$(basename "$merged_bam" .merged.bam)
    marked_bam="$markdup_dir/${sample}.marked.bam"
    metrics="$markdup_dir/${sample}.metrics.txt"
    srun /mnt/beegfs/apptainer/images/picard_latest.sif java -XX:ParallelGCThreads=40 -jar /usr/picard/picard.jar MarkDuplicates I="$merged_bam" O="$marked_bam" M="$metrics"
done

# ============ STEP 9: SortSam ============ #
echo "START SortSam"
mkdir -p "$sortedbam_dir"
for marked_bam in "$markdup_dir"/*.marked.bam; do
    sample=$(basename "$marked_bam" .marked.bam)
    sorted_bam="$sortedbam_dir/${sample}.sorted.bam"
    srun /mnt/beegfs/apptainer/images/gatk_latest.sif gatk SortSamSpark -I "$marked_bam" -O "$sorted_bam" --spark-runner LOCAL --spark-master 'local[*]' --tmp-dir "$tmp_dir"
done

# ============ STEP 10: BaseRecalibrator ============ #
echo "START BaseRecalibrator"
mkdir -p "$bqsr_dir"
for sorted_bam in "$sortedbam_dir"/*.sorted.bam; do
    sample=$(basename "$sorted_bam" .sorted.bam)
    recal_table="$bqsr_dir/${sample}.recal.table"
    srun /mnt/beegfs/apptainer/images/gatk_latest.sif gatk BaseRecalibrator -I "$sorted_bam" -R "$genome" --known-sites "$known_sites" --known-sites "$known_sites_indels" -O "$recal_table" --tmp-dir "$tmp_dir"
done

# ============ STEP 11: ApplyBQSR ============ #
echo "START ApplyBQSR"
mkdir -p "$applybqsr_dir"
for sorted_bam in "$sortedbam_dir"/*.sorted.bam; do
    sample=$(basename "$sorted_bam" .sorted.bam)
    bqsr_out="$applybqsr_dir/${sample}.bqsr.bam"
    recal_table="$bqsr_dir/${sample}.recal.table"
    srun /mnt/beegfs/apptainer/images/gatk_latest.sif gatk ApplyBQSR -R "$genome" -I "$sorted_bam" --bqsr-recal-file "$recal_table" -O "$bqsr_out" --tmp-dir "$tmp_dir"
done

# ============ FINAL REPORT ============ #
echo "All steps completed."

# Optional job stats:
sacct --format="JobID,Start,End,Elapsed,CPUTime,AveDiskRead,AveDiskWrite,MaxRSS" -j $SLURM_JOB_ID
